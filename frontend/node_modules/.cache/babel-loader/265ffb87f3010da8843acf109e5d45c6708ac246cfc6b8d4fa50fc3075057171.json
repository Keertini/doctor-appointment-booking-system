{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keert\\\\Documents\\\\ThriveHackathon\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useReducer } from \"react\";\n\n// Initial state for the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initial_state = {\n  // Initialize user state by checking local storage\n  user: localStorage.getItem(\"user\") !== undefined ? JSON.stringify(localStorage.getItem(\"user\")) : null,\n  loading: false,\n  error: null\n  // user: localStorage.getItem(\"user\") !== undefined ? localStorage.getItem(\"user\") : null,\n  // user: localStorage.getItem(\"user\") !== undefined ? JSON.parse(localStorage.getItem(\"user\")): null, loading: false, error: null,\n};\n\n// Create the authentication context\nexport const AuthContext = /*#__PURE__*/createContext(initial_state);\n\n// Reducer function for handling authentication actions\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN_START\":\n      // Set loading state when login process starts\n      return {\n        user: null,\n        loading: true,\n        error: null\n      };\n    case \"LOGIN_SUCCESS\":\n      // Set user state when login is successful\n      return {\n        user: action.payload,\n        loading: false,\n        error: null\n      };\n    case \"LOGIN_FAILURE\":\n      // Set error state when login fails\n      return {\n        user: null,\n        loading: false,\n        error: action.payload\n      };\n    case \"REGISTER_SUCCESS\":\n      // Set state after successful registration\n      return {\n        user: null,\n        loading: false,\n        error: null\n      };\n    case \"LOGOUT\":\n      // Clear user state on logout\n      return {\n        user: null,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Authentication context provider component\n_c = AuthReducer;\nexport const AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // UseReducer hook to manage state with the AuthReducer function\n  const [state, dispatch] = useReducer(AuthReducer, initial_state);\n\n  // Effect to update local storage when user state changes\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n  return (\n    /*#__PURE__*/\n    // Provide the authentication context value to its children\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        user: state.user,\n        loading: state.loading,\n        error: state.error,\n        dispatch // Provide dispatch function for updating state\n      },\n      children: [children, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(AuthContextProvider, \"W9QbWx7Z4rctFsX5T1v7mxZp6Nc=\");\n_c2 = AuthContextProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthReducer\");\n$RefreshReg$(_c2, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","initial_state","user","localStorage","getItem","undefined","JSON","stringify","loading","error","AuthContext","AuthReducer","state","action","type","payload","AuthContextProvider","children","dispatch","setItem"],"sources":["C:/Users/keert/Documents/ThriveHackathon/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\n\n// Initial state for the authentication context\nconst initial_state = {\n  // Initialize user state by checking local storage\n  user:\n    localStorage.getItem(\"user\") !== undefined\n      ? JSON.stringify(localStorage.getItem(\"user\"))\n      : null,\n  loading: false,\n  error: null,\n  // user: localStorage.getItem(\"user\") !== undefined ? localStorage.getItem(\"user\") : null,\n  // user: localStorage.getItem(\"user\") !== undefined ? JSON.parse(localStorage.getItem(\"user\")): null, loading: false, error: null,\n};\n\n// Create the authentication context\nexport const AuthContext = createContext(initial_state);\n\n// Reducer function for handling authentication actions\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN_START\":\n      // Set loading state when login process starts\n      return {\n        user: null,\n        loading: true,\n        error: null,\n      };\n    case \"LOGIN_SUCCESS\":\n      // Set user state when login is successful\n      return {\n        user: action.payload,\n        loading: false,\n        error: null,\n      };\n    case \"LOGIN_FAILURE\":\n      // Set error state when login fails\n      return {\n        user: null,\n        loading: false,\n        error: action.payload,\n      };\n    case \"REGISTER_SUCCESS\":\n      // Set state after successful registration\n      return {\n        user: null,\n        loading: false,\n        error: null,\n      };\n    case \"LOGOUT\":\n      // Clear user state on logout\n      return {\n        user: null,\n        loading: false,\n        error: null,\n      };\n    default:\n      return state;\n  }\n};\n\n// Authentication context provider component\nexport const AuthContextProvider = ({ children }) => {\n  // UseReducer hook to manage state with the AuthReducer function\n  const [state, dispatch] = useReducer(AuthReducer, initial_state);\n\n  // Effect to update local storage when user state changes\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n\n  return (\n    // Provide the authentication context value to its children\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        loading: state.loading,\n        error: state.error,\n        dispatch, // Provide dispatch function for updating state\n      }}\n    >\n      {children} {/* Render the children components */}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;;AAE5D;AAAA;AACA,MAAMC,aAAa,GAAG;EACpB;EACAC,IAAI,EACFC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,KAAKC,SAAS,GACtCC,IAAI,CAACC,SAAS,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,GAC5C,IAAI;EACVI,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;EACP;EACA;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,CAACG,aAAa,CAAC;;AAEvD;AACA,MAAMU,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB;MACA,OAAO;QACLZ,IAAI,EAAE,IAAI;QACVM,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,eAAe;MAClB;MACA,OAAO;QACLP,IAAI,EAAEW,MAAM,CAACE,OAAO;QACpBP,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,eAAe;MAClB;MACA,OAAO;QACLP,IAAI,EAAE,IAAI;QACVM,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEI,MAAM,CAACE;MAChB,CAAC;IACH,KAAK,kBAAkB;MACrB;MACA,OAAO;QACLb,IAAI,EAAE,IAAI;QACVM,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,QAAQ;MACX;MACA,OAAO;QACLP,IAAI,EAAE,IAAI;QACVM,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH;MACE,OAAOG,KAAK;EAAC;AAEnB,CAAC;;AAED;AAAA,KA1CMD,WAAW;AA2CjB,OAAO,MAAMK,mBAAmB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC9C;EACA,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGlB,UAAU,CAACW,WAAW,EAAEV,aAAa,CAAC;;EAEhE;EACAF,SAAS,CAAC,MAAM;IACdI,YAAY,CAACgB,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACC,SAAS,CAACK,KAAK,CAACV,IAAI,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACU,KAAK,CAACV,IAAI,CAAC,CAAC;EAEhB;IAAA;IACE;IACA,QAAC,WAAW,CAAC,QAAQ;MACnB,KAAK,EAAE;QACLA,IAAI,EAAEU,KAAK,CAACV,IAAI;QAChBM,OAAO,EAAEI,KAAK,CAACJ,OAAO;QACtBC,KAAK,EAAEG,KAAK,CAACH,KAAK;QAClBS,QAAQ,CAAE;MACZ,CAAE;MAAA,WAEDD,QAAQ,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA;EACU;AAE3B,CAAC;AAAC,GAtBWD,mBAAmB;AAAA,MAAnBA,mBAAmB;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}