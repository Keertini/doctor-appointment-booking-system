{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// Custom hook for fetching data from a URL\nconst useFetch = url => {\n  _s();\n  // State variables for storing data, error, and loading status\n  const [data, setData] = useState([]); // Initially empty array\n  const [error, setError] = useState(null); // Initially null\n  const [loading, setLoading] = useState(false); // Initially false\n\n  // Effect hook to fetch data from the provided URL\n  useEffect(() => {\n    // Function to fetch data asynchronously\n    const fetchData = async () => {\n      setLoading(true); // Set loading state to true when fetching starts\n\n      try {\n        // Fetch data from the provided URL\n        const res = await fetch(url);\n\n        // Check if response is successful\n        if (!res.ok) {\n          // If response is not ok, set error state\n          setError(\"Failed to fetch\");\n        }\n\n        // Convert response to JSON format\n        const result = await res.json();\n\n        // Set data state with the fetched data\n        setData(result.data);\n\n        // Set loading state to false when fetching is complete\n        setLoading(false);\n      } catch (error) {\n        // If an error occurs during fetching, set error state\n        setError(error.message);\n\n        // Set loading state to false when fetching is complete\n        setLoading(false);\n      }\n    };\n\n    // Call the fetchData function when the component mounts or when the URL changes\n    fetchData();\n  }, [url]); // Dependency array containing the URL\n\n  // Return the data, error, and loading status\n  return {\n    data,\n    error,\n    loading\n  };\n};\n\n// Export the useFetch custom hook\n_s(useFetch, \"6nhoqVvctpRRYiww7uwVz/g7/BM=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","error","setError","loading","setLoading","fetchData","res","fetch","ok","result","json","message"],"sources":["C:/Users/keert/Documents/ThriveHackathon/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Custom hook for fetching data from a URL\nconst useFetch = (url) => {\n  // State variables for storing data, error, and loading status\n  const [data, setData] = useState([]); // Initially empty array\n  const [error, setError] = useState(null); // Initially null\n  const [loading, setLoading] = useState(false); // Initially false\n\n  // Effect hook to fetch data from the provided URL\n  useEffect(() => {\n    // Function to fetch data asynchronously\n    const fetchData = async () => {\n      setLoading(true); // Set loading state to true when fetching starts\n\n      try {\n        // Fetch data from the provided URL\n        const res = await fetch(url);\n\n        // Check if response is successful\n        if (!res.ok) {\n          // If response is not ok, set error state\n          setError(\"Failed to fetch\");\n        }\n\n        // Convert response to JSON format\n        const result = await res.json();\n\n        // Set data state with the fetched data\n        setData(result.data);\n\n        // Set loading state to false when fetching is complete\n        setLoading(false);\n      } catch (error) {\n        // If an error occurs during fetching, set error state\n        setError(error.message);\n\n        // Set loading state to false when fetching is complete\n        setLoading(false);\n      }\n    };\n\n    // Call the fetchData function when the component mounts or when the URL changes\n    fetchData();\n  }, [url]); // Dependency array containing the URL\n\n  // Return the data, error, and loading status\n  return {\n    data,\n    error,\n    loading,\n  };\n};\n\n// Export the useFetch custom hook\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EACxB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,SAAS,GAAG,YAAY;MAC5BD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;MAElB,IAAI;QACF;QACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAG,CAAC;;QAE5B;QACA,IAAI,CAACQ,GAAG,CAACE,EAAE,EAAE;UACX;UACAN,QAAQ,CAAC,iBAAiB,CAAC;QAC7B;;QAEA;QACA,MAAMO,MAAM,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;;QAE/B;QACAV,OAAO,CAACS,MAAM,CAACV,IAAI,CAAC;;QAEpB;QACAK,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACd;QACAC,QAAQ,CAACD,KAAK,CAACU,OAAO,CAAC;;QAEvB;QACAP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAC,SAAS,EAAE;EACb,CAAC,EAAE,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX;EACA,OAAO;IACLC,IAAI;IACJE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;;AAED;AAAA,GAnDMN,QAAQ;AAoDd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}